/* automatically generated by rust-bindgen 0.65.1 */

pub const SECP256K1_FLAGS_TYPE_MASK: u32 = 255;
pub const SECP256K1_FLAGS_TYPE_CONTEXT: u32 = 1;
pub const SECP256K1_FLAGS_TYPE_COMPRESSION: u32 = 2;
pub const SECP256K1_FLAGS_BIT_CONTEXT_VERIFY: u32 = 256;
pub const SECP256K1_FLAGS_BIT_CONTEXT_SIGN: u32 = 512;
pub const SECP256K1_FLAGS_BIT_CONTEXT_DECLASSIFY: u32 = 1024;
pub const SECP256K1_FLAGS_BIT_COMPRESSION: u32 = 256;
pub const SECP256K1_CONTEXT_NONE: u32 = 1;
pub const SECP256K1_CONTEXT_VERIFY: u32 = 257;
pub const SECP256K1_CONTEXT_SIGN: u32 = 513;
pub const SECP256K1_CONTEXT_DECLASSIFY: u32 = 1025;
pub const SECP256K1_EC_COMPRESSED: u32 = 258;
pub const SECP256K1_EC_UNCOMPRESSED: u32 = 2;
pub const SECP256K1_TAG_PUBKEY_EVEN: u32 = 2;
pub const SECP256K1_TAG_PUBKEY_ODD: u32 = 3;
pub const SECP256K1_TAG_PUBKEY_UNCOMPRESSED: u32 = 4;
pub const SECP256K1_TAG_PUBKEY_HYBRID_EVEN: u32 = 6;
pub const SECP256K1_TAG_PUBKEY_HYBRID_ODD: u32 = 7;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct secp256k1_context_struct {
    _unused: [u8; 0],
}
#[doc = " Opaque data structure that holds context information\n\n  The primary purpose of context objects is to store randomization data for\n  enhanced protection against side-channel leakage. This protection is only\n  effective if the context is randomized after its creation. See\n  secp256k1_context_create for creation of contexts and\n  secp256k1_context_randomize for randomization.\n\n  A secondary purpose of context objects is to store pointers to callback\n  functions that the library will call when certain error states arise. See\n  secp256k1_context_set_error_callback as well as\n  secp256k1_context_set_illegal_callback for details. Future library versions\n  may use context objects for additional purposes.\n\n  A constructed context can safely be used from multiple threads\n  simultaneously, but API calls that take a non-const pointer to a context\n  need exclusive access to it. In particular this is the case for\n  secp256k1_context_destroy, secp256k1_context_preallocated_destroy,\n  and secp256k1_context_randomize.\n\n  Regarding randomization, either do it once at creation time (in which case\n  you do not need any locking for the other calls), or use a read-write lock."]
pub type secp256k1_context = secp256k1_context_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct secp256k1_scratch_space_struct {
    _unused: [u8; 0],
}
#[doc = " Opaque data structure that holds rewritable \"scratch space\"\n\n  The purpose of this structure is to replace dynamic memory allocations,\n  because we target architectures where this may not be available. It is\n  essentially a resizable (within specified parameters) block of bytes,\n  which is initially created either by memory allocation or TODO as a pointer\n  into some fixed rewritable space.\n\n  Unlike the context object, this cannot safely be shared between threads\n  without additional synchronization logic."]
pub type secp256k1_scratch_space = secp256k1_scratch_space_struct;
#[doc = " Opaque data structure that holds a parsed and valid public key.\n\n  The exact representation of data inside is implementation defined and not\n  guaranteed to be portable between different platforms or versions. It is\n  however guaranteed to be 64 bytes in size, and can be safely copied/moved.\n  If you need to convert to a format suitable for storage or transmission,\n  use secp256k1_ec_pubkey_serialize and secp256k1_ec_pubkey_parse. To\n  compare keys, use secp256k1_ec_pubkey_cmp."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct secp256k1_pubkey {
    pub data: [::std::os::raw::c_uchar; 64usize],
}
#[test]
fn bindgen_test_layout_secp256k1_pubkey() {
    const UNINIT: ::std::mem::MaybeUninit<secp256k1_pubkey> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<secp256k1_pubkey>(),
        64usize,
        concat!("Size of: ", stringify!(secp256k1_pubkey))
    );
    assert_eq!(
        ::std::mem::align_of::<secp256k1_pubkey>(),
        1usize,
        concat!("Alignment of ", stringify!(secp256k1_pubkey))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(secp256k1_pubkey),
            "::",
            stringify!(data)
        )
    );
}
#[doc = " Opaque data structured that holds a parsed ECDSA signature.\n\n  The exact representation of data inside is implementation defined and not\n  guaranteed to be portable between different platforms or versions. It is\n  however guaranteed to be 64 bytes in size, and can be safely copied/moved.\n  If you need to convert to a format suitable for storage, transmission, or\n  comparison, use the secp256k1_ecdsa_signature_serialize_* and\n  secp256k1_ecdsa_signature_parse_* functions."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct secp256k1_ecdsa_signature {
    pub data: [::std::os::raw::c_uchar; 64usize],
}
#[test]
fn bindgen_test_layout_secp256k1_ecdsa_signature() {
    const UNINIT: ::std::mem::MaybeUninit<secp256k1_ecdsa_signature> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<secp256k1_ecdsa_signature>(),
        64usize,
        concat!("Size of: ", stringify!(secp256k1_ecdsa_signature))
    );
    assert_eq!(
        ::std::mem::align_of::<secp256k1_ecdsa_signature>(),
        1usize,
        concat!("Alignment of ", stringify!(secp256k1_ecdsa_signature))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(secp256k1_ecdsa_signature),
            "::",
            stringify!(data)
        )
    );
}
#[doc = " A pointer to a function to deterministically generate a nonce.\n\n Returns: 1 if a nonce was successfully generated. 0 will cause signing to fail.\n Out:     nonce32:   pointer to a 32-byte array to be filled by the function.\n In:      msg32:     the 32-byte message hash being verified (will not be NULL)\n          key32:     pointer to a 32-byte secret key (will not be NULL)\n          algo16:    pointer to a 16-byte array describing the signature\n                     algorithm (will be NULL for ECDSA for compatibility).\n          data:      Arbitrary data pointer that is passed through.\n          attempt:   how many iterations we have tried to find a nonce.\n                     This will almost always be 0, but different attempt values\n                     are required to result in a different nonce.\n\n Except for test cases, this function should compute some cryptographic hash of\n the message, the algorithm, the key and the attempt."]
pub type secp256k1_nonce_function = ::std::option::Option<
    unsafe extern "C" fn(
        nonce32: *mut ::std::os::raw::c_uchar,
        msg32: *const ::std::os::raw::c_uchar,
        key32: *const ::std::os::raw::c_uchar,
        algo16: *const ::std::os::raw::c_uchar,
        data: *mut ::std::os::raw::c_void,
        attempt: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    #[doc = " A built-in constant secp256k1 context object with static storage duration, to be\n  used in conjunction with secp256k1_selftest.\n\n  This context object offers *only limited functionality* , i.e., it cannot be used\n  for API functions that perform computations involving secret keys, e.g., signing\n  and public key generation. If this restriction applies to a specific API function,\n  it is mentioned in its documentation. See secp256k1_context_create if you need a\n  full context object that supports all functionality offered by the library.\n\n  It is highly recommended to call secp256k1_selftest before using this context."]
    pub static mut secp256k1_context_static: *const secp256k1_context;
}
extern "C" {
    #[doc = " Deprecated alias for secp256k1_context_static."]
    pub static mut secp256k1_context_no_precomp: *const secp256k1_context;
}
extern "C" {
    #[doc = " Perform basic self tests (to be used in conjunction with secp256k1_context_static)\n\n  This function performs self tests that detect some serious usage errors and\n  similar conditions, e.g., when the library is compiled for the wrong endianness.\n  This is a last resort measure to be used in production. The performed tests are\n  very rudimentary and are not intended as a replacement for running the test\n  binaries.\n\n  It is highly recommended to call this before using secp256k1_context_static.\n  It is not necessary to call this function before using a context created with\n  secp256k1_context_create (or secp256k1_context_preallocated_create), which will\n  take care of performing the self tests.\n\n  If the tests fail, this function will call the default error handler to abort the\n  program (see secp256k1_context_set_error_callback)."]
    pub fn secp256k1_selftest();
}
extern "C" {
    #[doc = " Create a secp256k1 context object (in dynamically allocated memory).\n\n  This function uses malloc to allocate memory. It is guaranteed that malloc is\n  called at most once for every call of this function. If you need to avoid dynamic\n  memory allocation entirely, see secp256k1_context_static and the functions in\n  secp256k1_preallocated.h.\n\n  Returns: a newly created context object.\n  In:      flags: Always set to SECP256K1_CONTEXT_NONE (see below).\n\n  The only valid non-deprecated flag in recent library versions is\n  SECP256K1_CONTEXT_NONE, which will create a context sufficient for all functionality\n  offered by the library. All other (deprecated) flags will be treated as equivalent\n  to the SECP256K1_CONTEXT_NONE flag. Though the flags parameter primarily exists for\n  historical reasons, future versions of the library may introduce new flags.\n\n  If the context is intended to be used for API functions that perform computations\n  involving secret keys, e.g., signing and public key generation, then it is highly\n  recommended to call secp256k1_context_randomize on the context before calling\n  those API functions. This will provide enhanced protection against side-channel\n  leakage, see secp256k1_context_randomize for details.\n\n  Do not create a new context object for each operation, as construction and\n  randomization can take non-negligible time."]
    pub fn secp256k1_context_create(flags: ::std::os::raw::c_uint) -> *mut secp256k1_context;
}
extern "C" {
    #[doc = " Copy a secp256k1 context object (into dynamically allocated memory).\n\n  This function uses malloc to allocate memory. It is guaranteed that malloc is\n  called at most once for every call of this function. If you need to avoid dynamic\n  memory allocation entirely, see the functions in secp256k1_preallocated.h.\n\n  Cloning secp256k1_context_static is not possible, and should not be emulated by\n  the caller (e.g., using memcpy). Create a new context instead.\n\n  Returns: a newly created context object.\n  Args:    ctx: an existing context to copy (not secp256k1_context_static)"]
    pub fn secp256k1_context_clone(ctx: *const secp256k1_context) -> *mut secp256k1_context;
}
extern "C" {
    #[doc = " Destroy a secp256k1 context object (created in dynamically allocated memory).\n\n  The context pointer may not be used afterwards.\n\n  The context to destroy must have been created using secp256k1_context_create\n  or secp256k1_context_clone. If the context has instead been created using\n  secp256k1_context_preallocated_create or secp256k1_context_preallocated_clone, the\n  behaviour is undefined. In that case, secp256k1_context_preallocated_destroy must\n  be used instead.\n\n  Args:   ctx: an existing context to destroy, constructed using\n               secp256k1_context_create or secp256k1_context_clone\n               (i.e., not secp256k1_context_static)."]
    pub fn secp256k1_context_destroy(ctx: *mut secp256k1_context);
}
extern "C" {
    #[doc = " Set a callback function to be called when an illegal argument is passed to\n  an API call. It will only trigger for violations that are mentioned\n  explicitly in the header.\n\n  The philosophy is that these shouldn't be dealt with through a\n  specific return value, as calling code should not have branches to deal with\n  the case that this code itself is broken.\n\n  On the other hand, during debug stage, one would want to be informed about\n  such mistakes, and the default (crashing) may be inadvisable.\n  When this callback is triggered, the API function called is guaranteed not\n  to cause a crash, though its return value and output arguments are\n  undefined.\n\n  When this function has not been called (or called with fn==NULL), then the\n  default handler will be used. The library provides a default handler which\n  writes the message to stderr and calls abort. This default handler can be\n  replaced at link time if the preprocessor macro\n  USE_EXTERNAL_DEFAULT_CALLBACKS is defined, which is the case if the build\n  has been configured with --enable-external-default-callbacks. Then the\n  following two symbols must be provided to link against:\n   - void secp256k1_default_illegal_callback_fn(const char *message, void *data);\n   - void secp256k1_default_error_callback_fn(const char *message, void *data);\n  The library can call these default handlers even before a proper callback data\n  pointer could have been set using secp256k1_context_set_illegal_callback or\n  secp256k1_context_set_error_callback, e.g., when the creation of a context\n  fails. In this case, the corresponding default handler will be called with\n  the data pointer argument set to NULL.\n\n  Args: ctx:  an existing context object.\n  In:   fun:  a pointer to a function to call when an illegal argument is\n              passed to the API, taking a message and an opaque pointer.\n              (NULL restores the default handler.)\n        data: the opaque pointer to pass to fun above, must be NULL for the default handler.\n\n  See also secp256k1_context_set_error_callback."]
    pub fn secp256k1_context_set_illegal_callback(
        ctx: *mut secp256k1_context,
        fun: ::std::option::Option<
            unsafe extern "C" fn(
                message: *const ::std::os::raw::c_char,
                data: *mut ::std::os::raw::c_void,
            ),
        >,
        data: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    #[doc = " Set a callback function to be called when an internal consistency check\n  fails.\n\n  The default callback writes an error message to stderr and calls abort\n  to abort the program.\n\n  This can only trigger in case of a hardware failure, miscompilation,\n  memory corruption, serious bug in the library, or other error would can\n  otherwise result in undefined behaviour. It will not trigger due to mere\n  incorrect usage of the API (see secp256k1_context_set_illegal_callback\n  for that). After this callback returns, anything may happen, including\n  crashing.\n\n  Args: ctx:  an existing context object.\n  In:   fun:  a pointer to a function to call when an internal error occurs,\n              taking a message and an opaque pointer (NULL restores the\n              default handler, see secp256k1_context_set_illegal_callback\n              for details).\n        data: the opaque pointer to pass to fun above, must be NULL for the default handler.\n\n  See also secp256k1_context_set_illegal_callback."]
    pub fn secp256k1_context_set_error_callback(
        ctx: *mut secp256k1_context,
        fun: ::std::option::Option<
            unsafe extern "C" fn(
                message: *const ::std::os::raw::c_char,
                data: *mut ::std::os::raw::c_void,
            ),
        >,
        data: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    #[doc = " Create a secp256k1 scratch space object.\n\n  Returns: a newly created scratch space.\n  Args: ctx:  an existing context object.\n  In:   size: amount of memory to be available as scratch space. Some extra\n              (<100 bytes) will be allocated for extra accounting."]
    pub fn secp256k1_scratch_space_create(
        ctx: *const secp256k1_context,
        size: usize,
    ) -> *mut secp256k1_scratch_space;
}
extern "C" {
    #[doc = " Destroy a secp256k1 scratch space.\n\n  The pointer may not be used afterwards.\n  Args:       ctx: a secp256k1 context object.\n          scratch: space to destroy"]
    pub fn secp256k1_scratch_space_destroy(
        ctx: *const secp256k1_context,
        scratch: *mut secp256k1_scratch_space,
    );
}
extern "C" {
    #[doc = " Parse a variable-length public key into the pubkey object.\n\n  Returns: 1 if the public key was fully valid.\n           0 if the public key could not be parsed or is invalid.\n  Args: ctx:      a secp256k1 context object.\n  Out:  pubkey:   pointer to a pubkey object. If 1 is returned, it is set to a\n                  parsed version of input. If not, its value is undefined.\n  In:   input:    pointer to a serialized public key\n        inputlen: length of the array pointed to by input\n\n  This function supports parsing compressed (33 bytes, header byte 0x02 or\n  0x03), uncompressed (65 bytes, header byte 0x04), or hybrid (65 bytes, header\n  byte 0x06 or 0x07) format public keys."]
    pub fn secp256k1_ec_pubkey_parse(
        ctx: *const secp256k1_context,
        pubkey: *mut secp256k1_pubkey,
        input: *const ::std::os::raw::c_uchar,
        inputlen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Serialize a pubkey object into a serialized byte sequence.\n\n  Returns: 1 always.\n  Args:   ctx:        a secp256k1 context object.\n  Out:    output:     a pointer to a 65-byte (if compressed==0) or 33-byte (if\n                      compressed==1) byte array to place the serialized key\n                      in.\n  In/Out: outputlen:  a pointer to an integer which is initially set to the\n                      size of output, and is overwritten with the written\n                      size.\n  In:     pubkey:     a pointer to a secp256k1_pubkey containing an\n                      initialized public key.\n          flags:      SECP256K1_EC_COMPRESSED if serialization should be in\n                      compressed format, otherwise SECP256K1_EC_UNCOMPRESSED."]
    pub fn secp256k1_ec_pubkey_serialize(
        ctx: *const secp256k1_context,
        output: *mut ::std::os::raw::c_uchar,
        outputlen: *mut usize,
        pubkey: *const secp256k1_pubkey,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Compare two public keys using lexicographic (of compressed serialization) order\n\n  Returns: <0 if the first public key is less than the second\n           >0 if the first public key is greater than the second\n           0 if the two public keys are equal\n  Args: ctx:      a secp256k1 context object.\n  In:   pubkey1:  first public key to compare\n        pubkey2:  second public key to compare"]
    pub fn secp256k1_ec_pubkey_cmp(
        ctx: *const secp256k1_context,
        pubkey1: *const secp256k1_pubkey,
        pubkey2: *const secp256k1_pubkey,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Parse an ECDSA signature in compact (64 bytes) format.\n\n  Returns: 1 when the signature could be parsed, 0 otherwise.\n  Args: ctx:      a secp256k1 context object\n  Out:  sig:      a pointer to a signature object\n  In:   input64:  a pointer to the 64-byte array to parse\n\n  The signature must consist of a 32-byte big endian R value, followed by a\n  32-byte big endian S value. If R or S fall outside of [0..order-1], the\n  encoding is invalid. R and S with value 0 are allowed in the encoding.\n\n  After the call, sig will always be initialized. If parsing failed or R or\n  S are zero, the resulting sig value is guaranteed to fail verification for\n  any message and public key."]
    pub fn secp256k1_ecdsa_signature_parse_compact(
        ctx: *const secp256k1_context,
        sig: *mut secp256k1_ecdsa_signature,
        input64: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Parse a DER ECDSA signature.\n\n  Returns: 1 when the signature could be parsed, 0 otherwise.\n  Args: ctx:      a secp256k1 context object\n  Out:  sig:      a pointer to a signature object\n  In:   input:    a pointer to the signature to be parsed\n        inputlen: the length of the array pointed to be input\n\n  This function will accept any valid DER encoded signature, even if the\n  encoded numbers are out of range.\n\n  After the call, sig will always be initialized. If parsing failed or the\n  encoded numbers are out of range, signature verification with it is\n  guaranteed to fail for every message and public key."]
    pub fn secp256k1_ecdsa_signature_parse_der(
        ctx: *const secp256k1_context,
        sig: *mut secp256k1_ecdsa_signature,
        input: *const ::std::os::raw::c_uchar,
        inputlen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Serialize an ECDSA signature in DER format.\n\n  Returns: 1 if enough space was available to serialize, 0 otherwise\n  Args:   ctx:       a secp256k1 context object\n  Out:    output:    a pointer to an array to store the DER serialization\n  In/Out: outputlen: a pointer to a length integer. Initially, this integer\n                     should be set to the length of output. After the call\n                     it will be set to the length of the serialization (even\n                     if 0 was returned).\n  In:     sig:       a pointer to an initialized signature object"]
    pub fn secp256k1_ecdsa_signature_serialize_der(
        ctx: *const secp256k1_context,
        output: *mut ::std::os::raw::c_uchar,
        outputlen: *mut usize,
        sig: *const secp256k1_ecdsa_signature,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Serialize an ECDSA signature in compact (64 byte) format.\n\n  Returns: 1\n  Args:   ctx:       a secp256k1 context object\n  Out:    output64:  a pointer to a 64-byte array to store the compact serialization\n  In:     sig:       a pointer to an initialized signature object\n\n  See secp256k1_ecdsa_signature_parse_compact for details about the encoding."]
    pub fn secp256k1_ecdsa_signature_serialize_compact(
        ctx: *const secp256k1_context,
        output64: *mut ::std::os::raw::c_uchar,
        sig: *const secp256k1_ecdsa_signature,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Verify an ECDSA signature.\n\n  Returns: 1: correct signature\n           0: incorrect or unparseable signature\n  Args:    ctx:       a secp256k1 context object.\n  In:      sig:       the signature being verified.\n           msghash32: the 32-byte message hash being verified.\n                      The verifier must make sure to apply a cryptographic\n                      hash function to the message by itself and not accept an\n                      msghash32 value directly. Otherwise, it would be easy to\n                      create a \"valid\" signature without knowledge of the\n                      secret key. See also\n                      https://bitcoin.stackexchange.com/a/81116/35586 for more\n                      background on this topic.\n           pubkey:    pointer to an initialized public key to verify with.\n\n To avoid accepting malleable signatures, only ECDSA signatures in lower-S\n form are accepted.\n\n If you need to accept ECDSA signatures from sources that do not obey this\n rule, apply secp256k1_ecdsa_signature_normalize to the signature prior to\n verification, but be aware that doing so results in malleable signatures.\n\n For details, see the comments for that function."]
    pub fn secp256k1_ecdsa_verify(
        ctx: *const secp256k1_context,
        sig: *const secp256k1_ecdsa_signature,
        msghash32: *const ::std::os::raw::c_uchar,
        pubkey: *const secp256k1_pubkey,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Convert a signature to a normalized lower-S form.\n\n  Returns: 1 if sigin was not normalized, 0 if it already was.\n  Args: ctx:    a secp256k1 context object\n  Out:  sigout: a pointer to a signature to fill with the normalized form,\n                or copy if the input was already normalized. (can be NULL if\n                you're only interested in whether the input was already\n                normalized).\n  In:   sigin:  a pointer to a signature to check/normalize (can be identical to sigout)\n\n  With ECDSA a third-party can forge a second distinct signature of the same\n  message, given a single initial signature, but without knowing the key. This\n  is done by negating the S value modulo the order of the curve, 'flipping'\n  the sign of the random point R which is not included in the signature.\n\n  Forgery of the same message isn't universally problematic, but in systems\n  where message malleability or uniqueness of signatures is important this can\n  cause issues. This forgery can be blocked by all verifiers forcing signers\n  to use a normalized form.\n\n  The lower-S form reduces the size of signatures slightly on average when\n  variable length encodings (such as DER) are used and is cheap to verify,\n  making it a good choice. Security of always using lower-S is assured because\n  anyone can trivially modify a signature after the fact to enforce this\n  property anyway.\n\n  The lower S value is always between 0x1 and\n  0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\n  inclusive.\n\n  No other forms of ECDSA malleability are known and none seem likely, but\n  there is no formal proof that ECDSA, even with this additional restriction,\n  is free of other malleability. Commonly used serialization schemes will also\n  accept various non-unique encodings, so care should be taken when this\n  property is required for an application.\n\n  The secp256k1_ecdsa_sign function will by default create signatures in the\n  lower-S form, and secp256k1_ecdsa_verify will not accept others. In case\n  signatures come from a system that cannot enforce this property,\n  secp256k1_ecdsa_signature_normalize must be called before verification."]
    pub fn secp256k1_ecdsa_signature_normalize(
        ctx: *const secp256k1_context,
        sigout: *mut secp256k1_ecdsa_signature,
        sigin: *const secp256k1_ecdsa_signature,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " An implementation of RFC6979 (using HMAC-SHA256) as nonce generation function.\n If a data pointer is passed, it is assumed to be a pointer to 32 bytes of\n extra entropy."]
    pub static secp256k1_nonce_function_rfc6979: secp256k1_nonce_function;
}
extern "C" {
    #[doc = " A default safe nonce generation function (currently equal to secp256k1_nonce_function_rfc6979)."]
    pub static secp256k1_nonce_function_default: secp256k1_nonce_function;
}
extern "C" {
    #[doc = " Create an ECDSA signature.\n\n  Returns: 1: signature created\n           0: the nonce generation function failed, or the secret key was invalid.\n  Args:    ctx:       pointer to a context object (not secp256k1_context_static).\n  Out:     sig:       pointer to an array where the signature will be placed.\n  In:      msghash32: the 32-byte message hash being signed.\n           seckey:    pointer to a 32-byte secret key.\n           noncefp:   pointer to a nonce generation function. If NULL,\n                      secp256k1_nonce_function_default is used.\n           ndata:     pointer to arbitrary data used by the nonce generation function\n                      (can be NULL). If it is non-NULL and\n                      secp256k1_nonce_function_default is used, then ndata must be a\n                      pointer to 32-bytes of additional data.\n\n The created signature is always in lower-S form. See\n secp256k1_ecdsa_signature_normalize for more details."]
    pub fn secp256k1_ecdsa_sign(
        ctx: *const secp256k1_context,
        sig: *mut secp256k1_ecdsa_signature,
        msghash32: *const ::std::os::raw::c_uchar,
        seckey: *const ::std::os::raw::c_uchar,
        noncefp: secp256k1_nonce_function,
        ndata: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Verify an ECDSA secret key.\n\n  A secret key is valid if it is not 0 and less than the secp256k1 curve order\n  when interpreted as an integer (most significant byte first). The\n  probability of choosing a 32-byte string uniformly at random which is an\n  invalid secret key is negligible.\n\n  Returns: 1: secret key is valid\n           0: secret key is invalid\n  Args:    ctx: pointer to a context object.\n  In:      seckey: pointer to a 32-byte secret key."]
    pub fn secp256k1_ec_seckey_verify(
        ctx: *const secp256k1_context,
        seckey: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Compute the public key for a secret key.\n\n  Returns: 1: secret was valid, public key stores.\n           0: secret was invalid, try again.\n  Args:    ctx:    pointer to a context object (not secp256k1_context_static).\n  Out:     pubkey: pointer to the created public key.\n  In:      seckey: pointer to a 32-byte secret key."]
    pub fn secp256k1_ec_pubkey_create(
        ctx: *const secp256k1_context,
        pubkey: *mut secp256k1_pubkey,
        seckey: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Negates a secret key in place.\n\n  Returns: 0 if the given secret key is invalid according to\n           secp256k1_ec_seckey_verify. 1 otherwise\n  Args:   ctx:    pointer to a context object\n  In/Out: seckey: pointer to the 32-byte secret key to be negated. If the\n                  secret key is invalid according to\n                  secp256k1_ec_seckey_verify, this function returns 0 and\n                  seckey will be set to some unspecified value."]
    pub fn secp256k1_ec_seckey_negate(
        ctx: *const secp256k1_context,
        seckey: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Same as secp256k1_ec_seckey_negate, but DEPRECATED. Will be removed in\n  future versions."]
    pub fn secp256k1_ec_privkey_negate(
        ctx: *const secp256k1_context,
        seckey: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Negates a public key in place.\n\n  Returns: 1 always\n  Args:   ctx:        pointer to a context object\n  In/Out: pubkey:     pointer to the public key to be negated."]
    pub fn secp256k1_ec_pubkey_negate(
        ctx: *const secp256k1_context,
        pubkey: *mut secp256k1_pubkey,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Tweak a secret key by adding tweak to it.\n\n  Returns: 0 if the arguments are invalid or the resulting secret key would be\n           invalid (only when the tweak is the negation of the secret key). 1\n           otherwise.\n  Args:    ctx:   pointer to a context object.\n  In/Out: seckey: pointer to a 32-byte secret key. If the secret key is\n                  invalid according to secp256k1_ec_seckey_verify, this\n                  function returns 0. seckey will be set to some unspecified\n                  value if this function returns 0.\n  In:    tweak32: pointer to a 32-byte tweak. If the tweak is invalid according to\n                  secp256k1_ec_seckey_verify, this function returns 0. For\n                  uniformly random 32-byte arrays the chance of being invalid\n                  is negligible (around 1 in 2^128)."]
    pub fn secp256k1_ec_seckey_tweak_add(
        ctx: *const secp256k1_context,
        seckey: *mut ::std::os::raw::c_uchar,
        tweak32: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Same as secp256k1_ec_seckey_tweak_add, but DEPRECATED. Will be removed in\n  future versions."]
    pub fn secp256k1_ec_privkey_tweak_add(
        ctx: *const secp256k1_context,
        seckey: *mut ::std::os::raw::c_uchar,
        tweak32: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Tweak a public key by adding tweak times the generator to it.\n\n  Returns: 0 if the arguments are invalid or the resulting public key would be\n           invalid (only when the tweak is the negation of the corresponding\n           secret key). 1 otherwise.\n  Args:    ctx:   pointer to a context object.\n  In/Out: pubkey: pointer to a public key object. pubkey will be set to an\n                  invalid value if this function returns 0.\n  In:    tweak32: pointer to a 32-byte tweak. If the tweak is invalid according to\n                  secp256k1_ec_seckey_verify, this function returns 0. For\n                  uniformly random 32-byte arrays the chance of being invalid\n                  is negligible (around 1 in 2^128)."]
    pub fn secp256k1_ec_pubkey_tweak_add(
        ctx: *const secp256k1_context,
        pubkey: *mut secp256k1_pubkey,
        tweak32: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Tweak a secret key by multiplying it by a tweak.\n\n  Returns: 0 if the arguments are invalid. 1 otherwise.\n  Args:   ctx:    pointer to a context object.\n  In/Out: seckey: pointer to a 32-byte secret key. If the secret key is\n                  invalid according to secp256k1_ec_seckey_verify, this\n                  function returns 0. seckey will be set to some unspecified\n                  value if this function returns 0.\n  In:    tweak32: pointer to a 32-byte tweak. If the tweak is invalid according to\n                  secp256k1_ec_seckey_verify, this function returns 0. For\n                  uniformly random 32-byte arrays the chance of being invalid\n                  is negligible (around 1 in 2^128)."]
    pub fn secp256k1_ec_seckey_tweak_mul(
        ctx: *const secp256k1_context,
        seckey: *mut ::std::os::raw::c_uchar,
        tweak32: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Same as secp256k1_ec_seckey_tweak_mul, but DEPRECATED. Will be removed in\n  future versions."]
    pub fn secp256k1_ec_privkey_tweak_mul(
        ctx: *const secp256k1_context,
        seckey: *mut ::std::os::raw::c_uchar,
        tweak32: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Tweak a public key by multiplying it by a tweak value.\n\n  Returns: 0 if the arguments are invalid. 1 otherwise.\n  Args:    ctx:   pointer to a context object.\n  In/Out: pubkey: pointer to a public key object. pubkey will be set to an\n                  invalid value if this function returns 0.\n  In:    tweak32: pointer to a 32-byte tweak. If the tweak is invalid according to\n                  secp256k1_ec_seckey_verify, this function returns 0. For\n                  uniformly random 32-byte arrays the chance of being invalid\n                  is negligible (around 1 in 2^128)."]
    pub fn secp256k1_ec_pubkey_tweak_mul(
        ctx: *const secp256k1_context,
        pubkey: *mut secp256k1_pubkey,
        tweak32: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Randomizes the context to provide enhanced protection against side-channel leakage.\n\n  Returns: 1: randomization successful\n           0: error\n  Args:    ctx:       pointer to a context object (not secp256k1_context_static).\n  In:      seed32:    pointer to a 32-byte random seed (NULL resets to initial state).\n\n While secp256k1 code is written and tested to be constant-time no matter what\n secret values are, it is possible that a compiler may output code which is not,\n and also that the CPU may not emit the same radio frequencies or draw the same\n amount of power for all values. Randomization of the context shields against\n side-channel observations which aim to exploit secret-dependent behaviour in\n certain computations which involve secret keys.\n\n It is highly recommended to call this function on contexts returned from\n secp256k1_context_create or secp256k1_context_clone (or from the corresponding\n functions in secp256k1_preallocated.h) before using these contexts to call API\n functions that perform computations involving secret keys, e.g., signing and\n public key generation. It is possible to call this function more than once on\n the same context, and doing so before every few computations involving secret\n keys is recommended as a defense-in-depth measure. Randomization of the static\n context secp256k1_context_static is not supported.\n\n Currently, the random seed is mainly used for blinding multiplications of a\n secret scalar with the elliptic curve base point. Multiplications of this\n kind are performed by exactly those API functions which are documented to\n require a context that is not secp256k1_context_static. As a rule of thumb,\n these are all functions which take a secret key (or a keypair) as an input.\n A notable exception to that rule is the ECDH module, which relies on a different\n kind of elliptic curve point multiplication and thus does not benefit from\n enhanced protection against side-channel leakage currently."]
    pub fn secp256k1_context_randomize(
        ctx: *mut secp256k1_context,
        seed32: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Add a number of public keys together.\n\n  Returns: 1: the sum of the public keys is valid.\n           0: the sum of the public keys is not valid.\n  Args:   ctx:        pointer to a context object.\n  Out:    out:        pointer to a public key object for placing the resulting public key.\n  In:     ins:        pointer to array of pointers to public keys.\n          n:          the number of public keys to add together (must be at least 1)."]
    pub fn secp256k1_ec_pubkey_combine(
        ctx: *const secp256k1_context,
        out: *mut secp256k1_pubkey,
        ins: *const *const secp256k1_pubkey,
        n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Compute a tagged hash as defined in BIP-340.\n\n  This is useful for creating a message hash and achieving domain separation\n  through an application-specific tag. This function returns\n  SHA256(SHA256(tag)||SHA256(tag)||msg). Therefore, tagged hash\n  implementations optimized for a specific tag can precompute the SHA256 state\n  after hashing the tag hashes.\n\n  Returns: 1 always.\n  Args:    ctx: pointer to a context object\n  Out:  hash32: pointer to a 32-byte array to store the resulting hash\n  In:      tag: pointer to an array containing the tag\n        taglen: length of the tag array\n           msg: pointer to an array containing the message\n        msglen: length of the message array"]
    pub fn secp256k1_tagged_sha256(
        ctx: *const secp256k1_context,
        hash32: *mut ::std::os::raw::c_uchar,
        tag: *const ::std::os::raw::c_uchar,
        taglen: usize,
        msg: *const ::std::os::raw::c_uchar,
        msglen: usize,
    ) -> ::std::os::raw::c_int;
}
